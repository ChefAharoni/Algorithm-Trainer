name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: './app/package-lock.json'
          
      - name: Install Dependencies
        run: cd app && npm ci
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Prepare App for GitHub Pages
        run: |
          cd app
          
          # Create App.tsx for GitHub Pages with HashRouter
          cat > client/src/App.tsx << 'EOL'
          import { useState, useEffect } from 'react';
          import { Switch, Route } from 'wouter';
          import { Toaster } from '@/components/ui/toaster';
          import { queryClient } from "@/lib/queryClient";
          import { QueryClientProvider } from "@tanstack/react-query";
          
          // Pages
          import Home from '@/pages/Home';
          import RPNPage from '@/pages/RPNPage';
          import TreePage from '@/pages/TreePage';
          import NotFound from '@/pages/not-found';
          
          // HashRouter wrapper for GitHub Pages
          function useHashLocation() {
            const [location, setLocation] = useState(
              window.location.hash ? window.location.hash.replace("#", "") : "/"
            );
          
            useEffect(() => {
              // Handle hash change and remove the # from the location
              const handleHashChange = () => {
                const hash = window.location.hash || "#/";
                setLocation(hash.replace("#", ""));
              };
          
              window.addEventListener("hashchange", handleHashChange);
              handleHashChange(); // Handle initial hash
              return () => window.removeEventListener("hashchange", handleHashChange);
            }, []);
          
            // Replace history functions to work with hash
            const navigate = (to) => {
              window.location.hash = to;
            };
          
            return [location, navigate];
          }
          
          function Router() {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const [location, navigate] = useHashLocation();
            
            return (
              <Switch location={location}>
                <Route path="/" component={Home} />
                <Route path="/rpn" component={RPNPage} />
                <Route path="/tree" component={TreePage} />
                <Route component={NotFound} />
              </Switch>
            );
          }
          
          function App() {
            return (
              <QueryClientProvider client={queryClient}>
                <div className="min-h-screen bg-background">
                  <Router />
                  <Toaster />
                </div>
              </QueryClientProvider>
            );
          }
          
          export default App;
          EOL
          
          # Create vite.config.ts for GitHub Pages
          cat > vite.config.ts << 'EOL'
          import { defineConfig } from 'vite';
          import react from '@vitejs/plugin-react';
          import path from 'path';

          // https://vitejs.dev/config/
          export default defineConfig({
            base: '/Algorithm-Trainer/',
            plugins: [react()],
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './client/src'),
                '@shared': path.resolve(__dirname, './shared'),
                '@server': path.resolve(__dirname, './server'),
              },
            },
            build: {
              outDir: '../dist',
              emptyOutDir: true,
            },
          });
          EOL
          
          # Create 404.html file for GitHub Pages
          cat > 404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Algorithm Trainer</title>
            <script>
              // Redirect all 404 to the index.html with the requested path
              const segment = location.pathname.substring(1).split('/')[0];
              const baseHref = '/Algorithm-Trainer/';
              window.location.href = baseHref + '#' + location.pathname.substring(baseHref.length);
            </script>
          </head>
          <body>
            <p>Redirecting...</p>
          </body>
          </html>
          EOL
          
      - name: Build
        run: cd app && npm run build
        
      - name: Copy 404.html to dist
        run: cp app/404.html dist/
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
