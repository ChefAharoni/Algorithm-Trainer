name: Build Test

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install Dependencies
        run: cd app && npm ci
        
      - name: Prepare App for GitHub Pages
        run: |
          cd app
          
          # Create a custom build script for the frontend only
          cat > build-static.js << 'EOL'
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');

          // Ensure dist directory exists
          const distDir = path.resolve(__dirname, '../dist');
          if (!fs.existsSync(distDir)) {
            fs.mkdirSync(distDir, { recursive: true });
          }

          // Run Vite build for the frontend
          console.log('Building frontend with Vite...');
          execSync('npx vite build --outDir ../dist', { stdio: 'inherit' });

          console.log('Build completed successfully!');
          EOL
          
          # Create App.tsx for GitHub Pages with HashRouter
          cat > client/src/App.tsx << 'EOL'
          import { useState, useEffect } from 'react';
          import { Switch, Route } from 'wouter';
          import { Toaster } from '@/components/ui/toaster';
          
          // Pages
          import Home from '@/pages/Home';
          import RPNPage from '@/pages/RPNPage';
          import TreePage from '@/pages/TreePage';
          import NotFound from '@/pages/not-found';
          
          // HashRouter wrapper for GitHub Pages
          function useHashLocation() {
            const [location, setLocation] = useState(
              window.location.hash ? window.location.hash.replace("#", "") : "/"
            );
          
            useEffect(() => {
              // Handle hash change and remove the # from the location
              const handleHashChange = () => {
                const hash = window.location.hash || "#/";
                setLocation(hash.replace("#", ""));
              };
          
              window.addEventListener("hashchange", handleHashChange);
              handleHashChange(); // Handle initial hash
              return () => window.removeEventListener("hashchange", handleHashChange);
            }, []);
          
            // Replace history functions to work with hash
            const navigate = (to: string) => {
              window.location.hash = to;
            };
          
            return [location, navigate];
          }
          
          function Router() {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const [location, navigate] = useHashLocation();
            
            return (
              <Switch location={location}>
                <Route path="/" component={Home} />
                <Route path="/rpn" component={RPNPage} />
                <Route path="/tree" component={TreePage} />
                <Route component={NotFound} />
              </Switch>
            );
          }
          
          function App() {
            return (
              <div className="min-h-screen bg-background">
                <Router />
                <Toaster />
              </div>
            );
          }
          
          export default App;
          EOL
          
          # Create vite.config.ts for GitHub Pages
          cat > vite.config.ts << 'EOL'
          import { defineConfig } from 'vite';
          import react from '@vitejs/plugin-react';
          import path from 'path';
          
          // https://vitejs.dev/config/
          export default defineConfig({
            base: '/Algorithm-Trainer/',
            plugins: [react()],
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './client/src'),
                '@shared': path.resolve(__dirname, './shared'),
                '@server': path.resolve(__dirname, './server'),
              },
            },
            build: {
              outDir: '../dist',
              emptyOutDir: true,
              sourcemap: true,
            },
            root: './client',
          });
          EOL
          
      - name: Build Frontend
        run: cd app && node build-static.js
        
      - name: Copy 404.html to dist
        run: cp 404.html dist/
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/
